name: ðŸ”„ Update JSON and groovy scenarios for RC testing

on:
  workflow_dispatch:
    inputs:
      scenario_date:
        description: 'Date for scenario to be updated. Unique identifier of scenario'
        required: true
      scenario_data:
        description: 'JSON representation of RC testing scenario'
        required: true

env:
  SCENARIO_ID: ${{ github.event.inputs.scenario_date }}
  SCENARIO_DATE: ${{ fromJson(github.event.inputs.scenario_data).date}}
  SCENARIO_DATA: '${{ github.event.inputs.scenario_data }}'

jobs:
  check-pending-workflows:
    runs-on: ubuntu-latest
    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4

      - name: Check for pending or queued workflows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          API_URL="https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs"
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$API_URL")
          PENDING_WORKFLOWS=$(echo "$RESPONSE" | jq '.workflow_runs | map(select(.status == "queued" or .status == "pending"))')

          while [ "$(echo "$PENDING_WORKFLOWS" | jq 'length')" -gt 1 ]; do
            echo "$PENDING_WORKFLOWS" | jq -r '.[] | "- \(.name) (ID: \(.id), Status: \(.status))"'
            sleep 5
          done

  update-scenario:
    runs-on: ubuntu-latest
    needs: check-pending-workflows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Github Action user
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements_prod.txt


    - name: Delete old JSON and groovy scenarios for $SCENARIO_ID"
      run: |
        rm json_scenarios/$SCENARIO_ID.json scenarios/$SCENARIO_ID.groovy

    - name: Save JSON scenario for $SCENARIO_DATE
      run: |
        echo '${{ github.event.inputs.scenario_data }}' > json_scenarios/$SCENARIO_DATE.json

    - name: Generate groovy file from scenario representation in JSON format
      run: |
        python generate_groovy_scenario.py --json_scenario_path=json_scenarios/$SCENARIO_DATE.json

    - name: Push changes to repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git add json_scenarios scenarios
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Update scenario for $SCENARIO_ID"
          git pull --rebase
          git push origin HEAD:main
        fi
